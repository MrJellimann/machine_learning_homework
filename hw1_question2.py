# -*- coding: utf-8 -*-
"""HW1_Question2.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1kW3ZWCJTPtcStwA6NQz4XUswzmGGwsdg
"""

# extension of code provided for homework assignment 1, question 2

# Commented out IPython magic to ensure Python compatibility.
# %matplotlib inline
import matplotlib as mpl
import matplotlib.pyplot as plt
mpl.rc('axes', labelsize=14)
mpl.rc('xtick', labelsize=12)
mpl.rc('ytick', labelsize=12)

import numpy as np
np.random.seed(42)

xs = 2 * np.random.rand(100, 1)
x2 = 2 * np.random.rand(100, 1)
ys = 4 + 3 * xs + np.random.rand(100, 1)

plt.plot(xs, ys, "b.")
plt.plot(x2, ys, "g.")
plt.xlabel("$x_1, x_2$", fontsize=18)
plt.ylabel("$y$", rotation=0, fontsize=18)
plt.axis([0, 2, 0, 15])
plt.show()

# split the data into training and test sets
# train set
train_xs = xs[:80]
train_x2 = x2[:80]
train_ys = ys[:80]
# test set
test_xs = xs[80:]
test_x2 = x2[80:]
test_ys = ys[80:]

"""# Linear regression using numpy"""

# number of epochs
epochs = 10
# learning rate
lr = 0.01

# initial value for weight w and bias b
w = np.random.randn(1)
w2 = np.random.randn(1) # extension
b = np.zeros(1)

for epoch in np.arange(epochs):
  for i in np.arange(80):
    y_pred = w * train_xs[i] + w2 * train_x2[i] + b # extension within
    
    grad_w = (y_pred - train_ys[i]) * train_xs[i]
    grad_w2 = (y_pred - train_ys[i]) * train_x2[i] # extension
    grad_b = (y_pred - train_ys[i])
    
    w -= lr * grad_w
    w2 -= lr * grad_w2 # extension
    b -= lr * grad_b

test_loss = 0
# extension within
for i in np.arange(20):
  test_loss += 0.5 * (w * test_xs[i] + w2 * test_x2[i] + b - test_ys[i]) ** 2
test_loss /= 20

test_loss

pred_ys = w * test_xs + w2 * test_x2 + b # extension

plt.plot(test_xs, test_ys, "b.")
plt.plot(test_x2, test_ys, "g.")
plt.plot(test_xs, pred_ys, "r.") # predicted values 
plt.plot(test_x2, pred_ys, "y.")

plt.xlabel("$x_1, x_2$", fontsize=18)
plt.ylabel("$y$", rotation=0, fontsize=18)
plt.axis([0, 2, 0, 15])
plt.show()

import matplotlib.pyplot as pot
from mpl_toolkits.mplot3d import Axes3D
fig = pot.figure()
ax = fig.add_subplot(111, projection='3d')

ax.scatter(xs, x2, ys)
ax.set_xlabel('x1')
ax.set_ylabel('x2')
ax.set_zlabel('y')

pot.show()

b

w

w2